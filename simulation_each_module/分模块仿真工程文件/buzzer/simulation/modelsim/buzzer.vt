// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/24/2018 18:39:57"
                                                                                
// Verilog Test Bench template for design : buzzer
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module buzzer_vlg_tst();
// constants                                           
// general purpose registers

// test vector input registers
reg clk_50;
reg clk_fa;
reg clk_half;
reg hit;
reg rst;
// wires                                               
wire beep;

// assign statements (if any)                          
buzzer i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.clk_50(clk_50),
	.clk_fa(clk_fa),
	.clk_half(clk_half),
	.hit(hit),
	.rst(rst)
);
initial                                                
begin                                                  
	rst=1'b1;
	clk_50=1;
	clk_half=1;
	clk_fa=1;
	hit=0;
	#200 rst=0;
   #30 hit=1; //1
	#50 hit=0;
	#50 hit=1;
	#40 hit=0;
	#280 hit=1; //3
	#50 hit=0;
	#130 hit=1; //4
	#170 hit=0; //5
	#500 $stop;
$display("Running testbench");                       
end                                                    
always clk_50=#1 ~clk_50;
always clk_half=#100 ~clk_half;
always clk_fa=#3 ~clk_fa;                                             
endmodule

