// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/20/2018 20:05:22"
                                                                                
// Verilog Test Bench template for design : timer
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module timer_vlg_tst();
// constants                                           
// general purpose registers

// test vector input registers
reg clk_1;
reg rst;
reg [1:0] state;
// wires                                               
wire [3:0]  time_ge;
wire [3:0]  time_shi;

// assign statements (if any)                          
timer i1 (
// port map - connection between master ports and signals/registers   
	.clk_1(clk_1),
	.rst(rst),
	.state(state),
	.time_ge(time_ge),
	.time_shi(time_shi)
);
initial                                                
begin                                                  
	clk_1=1'b0;
	rst=1'b1;
	state=2'b00;
	#50 rst=0;
	state=2'b01;
	#410 state=2'b10;
	#500 rst=1'b1;
	state=2'b00;
	#55 rst=0;
	state=2'b01;
	#795 state=2'b11;
	#1000 $stop;
//$display("Running testbench");                       
end                                                    
always  clk_1 =#10 !clk_1;                                             
                                                 
endmodule

